name: test

on:
  push:
  pull_request:
  schedule:
    - cron: "51 3 * * 6" # Runs at 03:51, only on Saturday

jobs:
  test:
    name: ubuntu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    env:
      HTTP_PROXY: http://localhost:3001
      DEEPL_SERVER_URL: http://localhost:3000
      DEEPL_AUTH_KEY: mock

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: crystal-lang/install-crystal@v1
        with:
          crystal: latest

      - name: Ubuntu - Install libreadline-dev
        run: sudo apt-get update && sudo apt-get install -y libreadline-dev

      - name: Clone deepl-mock repository
        run: git clone --depth=1 https://github.com/DeepLcom/deepl-mock.git deepl-mock

      - name: Build deepl-mock Docker image
        run: |
          cd deepl-mock
          docker build -t deepl-mock .

      - name: Start deepl-mock server
        run: docker run -d --rm --name deepl-mock -p3000:3000 -p3001:3001 deepl-mock

      - name: Wait for deepl-mock to be ready
        run: |
          for i in {1..30}; do
            if curl --silent http://localhost:3000/v2/translate > /dev/null; then
              echo "deepl-mock server is ready"
              break
            fi
            echo "Waiting for deepl-mock server to be ready..."
            sleep 1
          done

      - name: Test deepl-mock server with curl
        run: |
          curl -X POST "${HTTP_PROXY}/v2/translate" \
            --header "Authorization: DeepL-Auth-Key ${DEEPL_AUTH_KEY}" \
            --header "Content-Type: application/json" \
            --data '{"text":["proton beam"],"target_lang":"DE"}'

      - name: Install dependencies
        run: shards install --without-development

      - name: Run tests
        run: crystal spec

      - name: Build executable
        run: shards build

      - name: Run executable (version/help/usage)
        run: |
          set -eux
          bin/deepl --version
          bin/deepl -v
          bin/deepl --help
          bin/deepl -h
          bin/deepl --usage
          bin/deepl -u

      - name: Run executable (translate text)
        run: |
          set -eux
          bin/deepl -i "proton beam" -f EN -t DE
          bin/deepl --input "proton beam" --from EN --to DE
          cat spec/fixtures/proton_beams.txt | bin/deepl -f EN -t DE
          bin/deepl -f EN -t DE < spec/fixtures/proton_beams.txt
          bin/deepl -f EN -t DE -i "proton beam" -o translated.txt && cat translated.txt
          bin/deepl -t
          bin/deepl -f

      - name: Run executable (glossary)
        run: |
          set -eux
          bin/deepl glossary list
          crystal eval 'puts "sourceEntry1\ttargetEntry1\nsourceEntry2\ttargetEntry2"' > glossary.tsv
          bin/deepl glossary create -n "Test Glossary" -f EN -t DE glossary.tsv
          bin/deepl glossary list
          bin/deepl glossary view "Test Glossary"
          bin/deepl glossary delete "Test Glossary"
          bin/deepl glossary -l
          bin/deepl glossary -p
          bin/deepl glossary -h
          bin/deepl glossary list -h
          bin/deepl glossary create -h
          bin/deepl glossary delete -h
          bin/deepl glossary edit -h
          bin/deepl glossary view -h

      - name: Run executable (translate document)
        run: |
          set -eux
          bin/deepl doc spec/fixtures/proton_beams.txt -t DE
          cat spec/fixtures/proton_beams_DE.txt

          output=$(bin/deepl doc spec/fixtures/proton_beams.txt -U -t DE 2>&1)
          echo "$output"

          id=$(echo "$output" | grep 'Document ID:'  | awk '{print $4}')
          key=$(echo "$output" | grep 'Document Key:' | awk '{print $4}')

          bin/deepl doc status -i "$id" -k "$key"
          bin/deepl doc download -i "$id" -k "$key" -o downloaded_proton_beams_DE.txt
          cat downloaded_proton_beams_DE.txt

      - name: Stop deepl-mock server
        if: always()
        run: docker stop deepl-mock || true
