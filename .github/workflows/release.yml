name: release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: build release ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: latest

      - name: Run Linux Build
        if: matrix.os == 'ubuntu'
        run: |
          mkdir -p bin
          chmod 755 bin
          docker run -d --name alpine -v $(pwd):/workspace -w /workspace crystallang/crystal:latest-alpine tail -f /dev/null
          docker exec alpine apk add readline-dev readline-static ncurses-dev ncurses-static ncurses-libs
          docker exec alpine shards install --without-development --release --static
          docker exec alpine shards build --release --static
          docker exec alpine chmod +x bin/deepl
          docker exec alpine gzip bin/deepl
          docker exec alpine mv bin/deepl.gz bin/deepl-linux.gz

      - name: Run Mac Build x64 (Static Linking)
        if: matrix.os == 'macos'
        run: |
          shards install --without-development --release
          brew update
          brew install libgc pcre2 openssl@3 readline ncurses
          ln -s $(brew ls libgc | grep libgc.a) .
          ln -s $(brew ls pcre2 | grep libpcre2-8.a) .
          ln -s $(brew ls openssl@3 | grep libssl.a) .
          ln -s $(brew ls openssl@3 | grep libcrypto.a) .
          ln -s $(brew ls readline | grep libreadline.a) .
          ln -s $(brew ls ncurses | grep libncurses.a) .
          ls -l *.a
          export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig:${PKG_CONFIG_PATH}"
          STATIC_LIBS="-L $(pwd)"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libgc.a"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libpcre2-8.a"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libssl.a"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libcrypto.a"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libreadline.a"
          STATIC_LIBS="$STATIC_LIBS $(pwd)/libncurses.a"
          STATIC_LIBS="$STATIC_LIBS -Wl,-search_paths_first"
          echo "Link flags: $STATIC_LIBS"
          shards build --link-flags="$STATIC_LIBS" --release
          chmod +x bin/deepl
          otool -L bin/deepl
          gzip bin/deepl
          mv bin/deepl.gz bin/deepl-macos.gz

      - name: Run Windows Build x64
        if: matrix.os == 'windows'
        run: |
          shards install --without-development --release
          shards build --release --static
          Set-ExecutionPolicy RemoteSigned -Scope Process
          Compress-Archive -Path bin/deepl.exe -DestinationPath bin/deepl-windows.zip

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/deepl-linux.gz
            bin/deepl-macos.gz
            bin/deepl-windows.zip
            LICENSE.txt
